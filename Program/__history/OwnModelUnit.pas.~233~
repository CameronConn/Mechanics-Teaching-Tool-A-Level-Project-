unit OwnModelUnit;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, 
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  FMX.Objects, Math, FMX.Edit,BallUnit;

type
  TOwnModelForm = class(TForm)
    CloseButton: TSpeedButton;
    Plank: TLine;
    OwnModelFormWelcomeMessage: TLabel;
    RequestForPlankAngle: TLabel;
    RequestMassofBall1: TLabel;
    RequestMassofBall2: TLabel;
    RequestForLengthofPlank: TLabel;
    RequestforDistanceBall1StartsupPlank: TLabel;
    RequestforLengthofString: TLabel;
    RequestforCoefficientOfFriction: TLabel;
    AngleOfPlankSelector: TSpinBox;
    PlankDegrees: TLabel;
    MassOfBall1Selector: TEdit;
    Ball1Kilograms: TLabel;
    MassOfBall2Selector: TEdit;
    LengthOfPlankSelector: TEdit;
    LengthOfStringSelector: TEdit;
    HowFarBall1UpPlankSelector: TEdit;
    CoefficientOfFrictionSelector: TEdit;
    Ball2Kilograms: TLabel;
    LengthOfPlankMetres: TLabel;
    LengthOfStringMetres: TLabel;
    HowFarBall1UpPlankMetres: TLabel;
    PlankString: TLine;
    VerticalString: TLine;
    AnimateModelButton: TButton;
    procedure CloseButtonClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure AngleOfPlankSelectorChange(Sender: TObject);
    procedure MassOfBall1SelectorChange(Sender: TObject);
    procedure MassOfBall2SelectorChange(Sender: TObject);
    procedure LengthOfPlankSelectorChange(Sender: TObject);
    procedure LengthOfStringSelectorChange(Sender: TObject);
    procedure HowFarBall1UpPlankSelectorChange(Sender: TObject);
    procedure CoefficientOfFrictionSelectorChange(Sender: TObject);
    procedure AnimatePlankAngle;
    procedure AnimatePlankStringAngleAndPosition(TopOfSlopeY,TopOfSlopeX : real);
    procedure AnimateVerticalStringPosition(TopOfSlopeY,TopOfSlopeX : real);
    procedure AnimateBallsToCorrectPositions;
    Procedure AnimateStringToCorrectHeight;
    procedure UpdateModel;
    procedure AnimateModelButtonClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  OwnModelForm: TOwnModelForm;
  PlankAngleDegrees, PlankAngleRadians, Ball1Mass, Ball2Mass, PlankLength, StringLength, DistanceBall1StartsUpPlank, CoefficientOfFriction, DefaultPlankAngleDegrees, DefaultBall1Mass, DefaultBall2Mass, DefaultPlankLength, DefaultStringLength, DefaultDistanceBall1StartsUpPlank, DefaultCoefficientOfFriction,HeightOfPlankPixels : real;
  Ball1,Ball2: TBall;
  CONST g = 9.8;
        SmoothnessConstant=100;

implementation

{$R *.fmx}



function ConvertMetresToPixels(Input : real) : real;
begin
  result:=Input*(HeightOfPlankPixels/PlankLength);
end;

function CalculateHeightofPlankToUseInPixels : real;
begin
  if OwnModelForm.Height < OwnModelForm.Width then result:= OwnModelForm.Height-150
  else result:=OwnModelForm.Width-150;
end;

function CalculateSignificantFigures(Input:String) : integer;
var Stepper : integer;
begin
Result:=Length(Input);
  for Stepper := 1 to Length(Input) do
    begin
      if Input[Stepper] = '.' then Result:=Length(Input) - 1
    end;
end;

function CalculateIfValid3DigitPositiveReal(Input:String) : boolean;
begin
  if (StrtoFloat(input)<0) or (CalculateSignificantFigures(Input)>3) then result:=false
  else result := true;
end;

function CalculateIfValid4DigitPositiveReal(Input:String) : boolean;
begin
  if (StrtoFloat(input)<0) or (CalculateSignificantFigures(Input)>4) then result:=false
  else result := true;
end;

function CalculateTopOfSlopeY (HeightOfPlankPixels : real) : real;
begin
 Result:=OwnModelForm.Height-50-(HeightOfPlankPixels*Cos((pi/2)-PlankAngleRadians));
end;

function CalculateTopOfSlopeX (HeightOfPlankPixels : real) : real;
begin
 Result:=70+(HeightOfPlankPixels*Sin((pi/2)-PlankAngleRadians));
end;

procedure CheckChosenValuesMakeSense(ChangedSelector:Tedit; DefaultValue:real);
begin
  if (DistanceBall1StartsUpPlank+StringLength<PlankLength)
    then begin
          ShowMessage('The chosen values result in the string not begin long enough to connect two particles in this plane, please ammend');
          ChangedSelector.Text:=FloattoStr(DefaultValue);
         end;
end;

procedure TOwnModelForm.AnimateBallsToCorrectPositions;
var NewBall1X,NewBall1Y,NewBall2X,NewBall2Y,BottomOfPlankX,BottomOfPlankY : real;
begin
  BottomOfPlankY:=Plank.Position.Y+HeightOfPlankPixels-52;
  BottomOfPlankX:=Plank.Position.X-18;
  NewBall1X:=BottomOfPlankX+(ConvertMetresToPixels(DistanceBall1StartsUpPlank)*Cos(PlankAngleRadians));
  NewBall1Y:=BottomOfPlankY-(ConvertMetresToPixels(DistanceBall1StartsUpPlank)*Sin(PlankAngleRadians));
  NewBall2X:=BottomOfPlankX+HeightOfPlankPixels*Cos(PlankAngleRadians);
  NewBall2Y:=BottomOfPlankY - ConvertMetresToPixels((PlankLength*Sin(PlankAngleRadians))-StringLength+PlankLength-DistanceBall1StartsUpPlank);
  Ball1.AnimateFloat('position.X',NewBall1X,1);
  Ball1.AnimateFloat('position.Y',NewBall1Y,1);
  Ball2.AnimateFloat('position.X',NewBall2X,1);
  Ball2.AnimateFloat('position.Y',NewBall2Y,1);
end;

procedure TOwnModelForm.AnimateModelButtonClick(Sender: TObject);
var    UpSlope : string;
       Counter : integer;
       NewXBall1,NewYBall1,NewXBall2,NewYBall2,TimeForThisMovement,PartEndVelocity,Ball2YLocation,Ball1XLocation,Ball1YLocation,EachPartOfInitialMovementLength, InitialMovementLength,ExtraDisplacementLength,EachPartOfExtraDisplacementLength,Acceleration,VelocityOfBall1WhenBall2HitGround,VelocityOFBall2WhenBall1HitGround,CurrentInitialSpeed,WaitingTime,LowestRatioForMovement,HighestRatioForMovement:real;
begin
CurrentInitialSpeed:=0;
WaitingTime:=0;
if Ball2Mass>Ball1Mass*((CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians)) then UpSlope:='UpSlope'
else if Ball2Mass<Ball1Mass*((-CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians)) then UpSlope:='DownSlope'
else UpSlope:= 'Stationery';
if UpSlope = 'UpSlope' then
 begin
    Acceleration:=((-Ball1Mass*g*((Sin(PlankAngleRadians))+(CoefficientofFriction*(Cos(PlankAngleRadians)))))+(Ball2Mass*g))/(Ball1Mass+Ball2Mass);
    VelocityOfBall1WhenBall2HitGround:= Sqrt(2*Acceleration*((PlankLength*Sin(PlankAngleRadians))-StringLength+PlankLength-DistanceBall1StartsUpPlank));
    ExtraDisplacementLength:=(((VelocityOfBall1WhenBall2HitGround)*(VelocityOfBall1WhenBall2HitGround))/(2*g*((CoefficientofFriction*Cos(PlankAngleRadians))+(Sin(PlankAngleRadians)))));
    EachPartOfExtraDisplacementLength:=ExtraDisplacementLength/SmoothnessConstant;
    InitialMovementLength:=(PlankLength*Sin(PlankAngleRadians))-StringLength+PlankLength-DistanceBall1StartsUpPlank;
    EachPartOfInitialMovementLength:=InitialMovementLength/SmoothnessConstant;
    Ball2YLocation:=Ball2.Position.Y;
    Ball1YLocation:=Ball1.Position.Y;
    Ball1XLocation:=Ball1.Position.X;
    if DistanceBall1StartsUpPlank+InitialMovementLength+ExtraDisplacementLength>PlankLength
      then Showmessage('Chosen Values result in a problem beyond the M1 Specification, Ball 1 would fly off the top of the incline')
      else begin
              for counter := 1 to SmoothnessConstant do
                begin
                  PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(2*Acceleration*EachPartOfInitialMovementLength));
                  TimeForThisMovement:=(PartEndVelocity-CurrentInitialSpeed)/Acceleration;
                  NewYBall2:=Ball2YLocation+ConvertMetresToPixels(Counter*EachPartOfInitialMovementLength);
                  NewXBall1:= Ball1XLocation + ConvertMetresToPixels((Counter*EachPartOfInitialMovementLength)*Cos(PlankAngleRadians));
                  NewYBall1:= Ball1YLocation - ConvertMetresToPixels((Counter*EachPartOfInitialMovementLength)*Sin(PlankAngleRadians));
                  Ball1.AnimateFloatDelay('position.Y',NewYBall1,TimeForThisMovement,WaitingTime);
                  Ball1.AnimateFloatDelay('position.X',NewXBall1,TimeForThisMovement,WaitingTime);
                  Ball2.AnimateFloatDelay('position.Y',NewYBall2,TimeForThisMovement,WaitingTime);
                  PlankString.AnimateFloatDelay('Height',ConvertMetresToPixels(PlankLength-(DistanceBall1StartsUpPlank+(Counter*EachPartOfInitialMovementLength))),TimeForThisMovement,WaitingTime);
                  VerticalString.AnimateFloatDelay('Height',ConvertMetresToPixels(StringLength-PlankLength+DistanceBall1StartsUpPlank+(Counter*EachPartOfInitialMovementLength)),TimeForThisMovement,WaitingTime);
                  WaitingTime:=WaitingTime+TimeforThisMovement;
                  CurrentInitialSpeed:=PartEndVelocity;
                end;
              Ball1XLocation:=NewXBall1;
              Ball1YLocation:=NewYBall1;
              for counter := 1 to (SmoothnessConstant-1) do
                begin
                 PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(-2*g*((CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians))*EachPartOfExtraDisplacementLength));
                 TimeForThisMovement:=(2*EachPartOfExtraDisplacementLength)/(CurrentInitialSpeed+PartEndVelocity);
                 NewXBall1:=Ball1XLocation + ConvertMetresToPixels((Counter*EachPartOfExtraDisplacementLength)*Cos(PlankAngleRadians));
                 NewYBall1:= Ball1YLocation - ConvertMetresToPixels((Counter*EachPartOfExtraDisplacementLength)*Sin(PlankAngleRadians));
                 Ball1.AnimateFloatDelay('position.Y',NewYBall1,TimeForThisMovement,WaitingTime);
                 Ball1.AnimateFloatDelay('position.X',NewXBall1,TimeForThisMovement,WaitingTime);
                 PlankString.AnimateFloatDelay('Height',ConvertMetresToPixels(PlankLength-(DistanceBall1StartsUpPlank+InitialMovementLength+(Counter*EachPartOfExtraDisplacementLength))),TimeForThisMovement,WaitingTime);
                 WaitingTime:=WaitingTime+TimeForThisMovement;
                 CurrentInitialSpeed:=PartEndVelocity;
                end;
              Ball1XLocation:=NewXBall1;
              Ball1YLocation:=NewYBall1;
              CurrentInitialSpeed:=0;
              for counter := 1 to (SmoothnessConstant-1) do
                begin
                 PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(2*g*((CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians))*EachPartOfExtraDisplacementLength));
                 TimeForThisMovement:=(2*EachPartOfExtraDisplacementLength)/(CurrentInitialSpeed+PartEndVelocity);
                 NewXBall1:=Ball1XLocation - ConvertMetresToPixels((Counter*EachPartOfExtraDisplacementLength)*Cos(PlankAngleRadians));
                 NewYBall1:=Ball1YLocation + ConvertMetresToPixels((Counter*EachPartOfExtraDisplacementLength)*Sin(PlankAngleRadians));
                 Ball1.AnimateFloatDelay('position.Y',NewYBall1,TimeForThisMovement,WaitingTime);
                 Ball1.AnimateFloatDelay('position.X',NewXBall1,TimeForThisMovement,WaitingTime);
                 PlankString.AnimateFloatDelay('Height',ConvertMetresToPixels(PlankLength-(DistanceBall1StartsUpPlank+InitialMovementLength+ExtraDisplacementLength-(Counter*EachPartOfExtraDisplacementLength))),TimeForThisMovement,WaitingTime);
                 WaitingTime:=WaitingTime+TimeForThisMovement;
                 CurrentInitialSpeed:=PartEndVelocity;
                end;
          end;
 end
 else if UpSlope = 'DownSlope' then begin
    Acceleration:=((Ball1Mass*g*((Sin(PlankAngleRadians))-(CoefficientofFriction*(Cos(PlankAngleRadians)))))-(Ball2Mass*g))/(Ball1Mass+Ball2Mass);
    VelocityOfBall2WhenBall1HitGround:= Sqrt(2*Acceleration*DistanceBall1StartsUpPlank);
    InitialMovementLength:=DistanceBall1StartsUpPlank;
    EachPartOfInitialMovementLength:=InitialMovementLength/SmoothnessConstant;
    ExtraDisplacementLength:=((VelocityOfBall2WhenBall1HitGround)*(VelocityOfBall2WhenBall1HitGround))/(2*g);
    EachPartOfExtraDisplacementLength:=ExtraDisplacementLength/SmoothnessConstant;
    Ball2YLocation:=Ball2.Position.Y;
    Ball1YLocation:=Ball1.Position.Y;
    Ball1XLocation:=Ball1.Position.X;
    if (PlankLength*Sin(PlankAngleRadians))-StringLength+PlankLength-DistanceBall1StartsUpPlank+InitialMovementLength+ExtraDisplacementLength>PlankLength*Sin(PlankAngleRadians)
      then Showmessage('Chosen Values result in a problem beyond the M1 Specification, Ball 2 would move higher than the top of the incline')
      else begin
            for counter := 1 to SmoothnessConstant do
              begin
                PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(2*Acceleration*EachPartOfInitialMovementLength));
                TimeForThisMovement:=(PartEndVelocity-CurrentInitialSpeed)/Acceleration;
                NewYBall2:=Ball2YLocation- ConvertMetresToPixels(Counter*EachPartOfInitialMovementLength);
                NewXBall1:= Ball1XLocation - ConvertMetresToPixels((Counter*EachPartOfInitialMovementLength)*Cos(PlankAngleRadians));
                NewYBall1:= Ball1YLocation + ConvertMetresToPixels((Counter*EachPartOfInitialMovementLength)*Sin(PlankAngleRadians));
                Ball1.AnimateFloatDelay('position.Y',NewYBall1,TimeForThisMovement,WaitingTime);
                Ball1.AnimateFloatDelay('position.X',NewXBall1,TimeForThisMovement,WaitingTime);
                Ball2.AnimateFloatDelay('position.Y',NewYBall2,TimeForThisMovement,WaitingTime);
                PlankString.AnimateFloatDelay('Height',ConvertMetresToPixels(PlankLength-(DistanceBall1StartsUpPlank-(Counter*EachPartOfInitialMovementLength))),TimeForThisMovement,WaitingTime);
                VerticalString.AnimateFloatDelay('Height',ConvertMetresToPixels(StringLength-PlankLength+DistanceBall1StartsUpPlank-(Counter*EachPartOfInitialMovementLength)),TimeForThisMovement,WaitingTime);
                WaitingTime:=WaitingTime+TimeforThisMovement;
                CurrentInitialSpeed:=PartEndVelocity;
              end;
            Ball2YLocation:=NewYBall2;
            for counter := 1 to (SmoothnessConstant-1) do
              begin
               PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(-2*g*EachPartOfExtraDisplacementLength));
               TimeForThisMovement:=(2*EachPartOfExtraDisplacementLength)/(CurrentInitialSpeed+PartEndVelocity);
               NewYBall2:=Ball2YLocation- ConvertMetresToPixels(Counter*EachPartOfExtraDisplacementLength);
               Ball2.AnimateFloatDelay('position.y',NewYBall2,TimeForThisMovement,WaitingTime);
               VerticalString.AnimateFloatDelay('Height',ConvertMetresToPixels(StringLength-PlankLength+DistanceBall1StartsUpPlank-InitialMovementLength-(Counter*EachPartOfExtraDisplacementLength)),TimeForThisMovement,WaitingTime);
               WaitingTime:=WaitingTime+TimeForThisMovement;
               CurrentInitialSpeed:=PartEndVelocity;
              end;
            CurrentInitialSpeed:=0;
            Ball2YLocation:=NewYBall2;
            for counter := 1 to (SmoothnessConstant-1) do
              begin
               PartEndVelocity:=Sqrt((CurrentInitialSpeed*CurrentInitialSpeed)+(2*g*EachPartOfExtraDisplacementLength));
               TimeForThisMovement:=(2*EachPartOfExtraDisplacementLength)/(CurrentInitialSpeed+PartEndVelocity);
               NewYBall2:=Ball2YLocation+ConvertMetresToPixels(Counter*EachPartOfExtraDisplacementLength);
               Ball2.AnimateFloatDelay('position.y',NewYBall2,TimeForThisMovement,WaitingTime);
               VerticalString.AnimateFloatDelay('Height',ConvertMetresToPixels(StringLength-PlankLength+DistanceBall1StartsUpPlank-InitialMovementLength-ExtraDisplacementLength+(Counter*EachPartOfExtraDisplacementLength)),TimeForThisMovement,WaitingTime);
               WaitingTime:=WaitingTime+TimeForThisMovement;
               CurrentInitialSpeed:=PartEndVelocity;
              end;
      end;
 end
 else if UpSlope = 'Stationery' then
  begin
    LowestRatioForMovement:= (CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians);
    HighestRatioForMovement:=(-CoefficientofFriction*Cos(PlankAngleRadians))+Sin(PlankAngleRadians);
    if HighestRatioForMovement<0
      then Showmessage('The Ball would not move! For this angle and coefficient of friction, the system will only move where the Mass of Ball 2 divided by the Mass of Ball 1 is greater than ' + floattostr(LowestRatioForMovement))
      else Showmessage('The Ball would not move! For this angle and coefficient of friction, the system will only move where the Mass of Ball 2 divided by the Mass of Ball 1 is greater than ' + floattostr(LowestRatioForMovement) + ' or smaller than ' + floattostr(HighestRatioForMovement));
  end;
end;

procedure TOwnModelForm.AnimatePlankAngle;
begin
  Plank.AnimateFloat('rotationangle',90-PlankAngleDegrees,1);
end;

procedure TOwnModelForm.AnimatePlankStringAngleAndPosition(TopOfSlopeY,TopOfSlopeX : real);
begin
 PlankString.AnimateFloat('rotationangle',90-PlankAngleDegrees,1);
 PlankString.AnimateFloat('position.X',TopOfSlopeX+80,1);
 PlankString.AnimateFloat('position.Y',TopOfSlopeY-30,1);
end;

procedure TOwnModelForm.AnimateVerticalStringPosition(TopOfSlopeY: Real; TopOfSlopeX: Real);
begin
 VerticalString.AnimateFloat('position.X',TopOfSlopeX+80,1);
 VerticalString.AnimateFloat('position.Y',TopOfSlopeY-30,1);
end;

procedure TOwnModelForm.AnimateStringToCorrectHeight;
begin
  PlankString.AnimateFloat('Height',ConvertMetresToPixels(PlankLength-DistanceBall1StartsUpPlank),1);
  VerticalString.AnimateFloat('Height',ConvertMetresToPixels(StringLength-PlankLength+DistanceBall1StartsUpPlank),1);
end;

procedure TOwnModelForm.UpdateModel;
var TopOfSlopeY, TopOfSlopeX : real;
begin
 PlankAngleRadians:=DegtoRad(PlankAngleDegrees);
 AnimatePlankAngle;
 TopOfSlopeY:=CalculateTopOfSlopeY(HeightOfPlankPixels);
 TopOfSlopeX:=CalculateTopOfSlopeX(HeightOfPlankPixels);
 AnimatePlankStringAngleAndPosition(TopOfSlopeY,TopOfSlopeX);
 AnimateVerticalStringPosition(TopOfSlopeY,TopOfSlopeX);
 AnimateBallsToCorrectPositions;
 AnimateStringToCorrectHeight;
end;

procedure TOwnModelForm.AngleOfPlankSelectorChange(Sender: TObject);
begin
  if (StrtoInt(AngleofPlankSelector.Text)>89) or (StrtoInt(AngleofPlankSelector.Text)<1)
  then begin
    AngleOfPlankSelector.Text:=FloattoStr(DefaultPlankAngleDegrees);
    ShowMessage('Not a valid angle of incline, please select an integer between 0 and 90');
  end;
  CheckChosenValuesMakeSense(AngleOfPlankSelector,DefaultPlankAngleDegrees);
  PlankAngleDegrees:=StrToInt(AngleofPlankSelector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.CloseButtonClick(Sender: TObject);
begin
  halt;
  Ball1.Destroy;
  Ball2.Destroy;
end;

procedure TOwnModelForm.CoefficientOfFrictionSelectorChange(Sender: TObject);
begin
  if CalculateIfValid4DigitPositiveReal(CoefficientOfFrictionSelector.Text) = false then
    begin
      CoefficientOfFrictionSelector.Text:=FloattoStr(DefaultCoefficientOfFriction);
      ShowMessage('Not a valid coefficient of friction, please select a positive 4 digit or less real number');
    end;
  CheckChosenValuesMakeSense(CoefficientOfFrictionSelector,DefaultCoefficientOfFriction);
  CoefficientOfFriction:=StrToFloat(CoefficientOfFrictionSelector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.FormCreate(Sender: TObject);
begin
  Ball1:=TBall.Create('BallPicture.png',Self);
  Ball2:=TBall.Create('BallPicture.png',Self);
  DefaultPlankLength:=6;
  PlankLength:=DefaultPlankLength;
  DefaultPlankAngleDegrees:=30;
  PlankAngleDegrees:= DefaultPlankAngleDegrees;
  DefaultBall1Mass:=5;
  Ball1Mass:=DefaultBall1Mass;
  DefaultBall2Mass:=5;
  Ball2Mass:=DefaultBall2Mass;
  DefaultStringLength:=7;
  StringLength:=DefaultStringLength;
  DefaultDistanceBall1StartsUpPlank:=1;
  DistanceBall1StartsUpPlank:=DefaultDistanceBall1StartsUpPlank;
  DefaultCoefficientOfFriction:=0.3;
  CoefficientOfFriction:=DefaultCoefficientOfFriction;
  LengthOfPlankSelector.Text:=FloattoStr(DefaultPlankLength);
  AngleOfPlankSelector.Text:= FloattoStr(DefaultPlankAngleDegrees);
  MassOfBall1Selector.Text:=FloattoStr(DefaultBall1Mass);
  MassOfBall2Selector.Text:=FloattoStr(DefaultBall2Mass);
  LengthOfStringSelector.Text:=FloattoStr(DefaultStringLength);
  HowFarBall1UpPlankSelector.Text:=FloattoStr(DefaultDistanceBall1StartsUpPlank);
  CoefficientOfFrictionSelector.Text:=FloattoStr(DefaultCoefficientOfFriction);
end;

procedure TOwnModelForm.FormResize(Sender: TObject);  //Going Fullscreen counts as resize
begin
  HeightofPlankPixels:=CalculateHeightofPlanktoUseInPixels;
  Plank.SetBounds(70,OwnModelForm.Height-50-HeightOfPlankPixels,50,HeightofPlankPixels);
  UpdateModel;
end;

procedure TOwnModelForm.HowFarBall1UpPlankSelectorChange(Sender: TObject);
begin
  if CalculateIfValid3DigitPositiveReal(HowFarBall1UpPlankSelector.Text) = false then
    begin
      HowFarBall1UpPlankSelector.Text:=FloattoStr(DefaultDistanceBall1StartsUpPlank);
      ShowMessage('Not a valid distance for ball 1 to start up plank, please select a positive 3 digit or less real number');
    end;
  CheckChosenValuesMakeSense(HowFarBall1UpPlankSelector,DefaultDistanceBall1StartsUpPlank);
  DistanceBall1StartsUpPlank:=StrToFloat(HowFarBall1UpPlankSelector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.LengthOfPlankSelectorChange(Sender: TObject);
begin
  if CalculateIfValid3DigitPositiveReal(LengthOfPlankSelector.Text) = false then
    begin
      LengthOfPlankSelector.Text:=FloattoStr(DefaultPlankLength);
      ShowMessage('Not a valid plank length, please select a positive 3 digit or less real number');
    end;
  CheckChosenValuesMakeSense(LengthOfPlankSelector,DefaultPlankLength);
  PlankLength:=StrToFloat(LengthOfPlankSelector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.LengthOfStringSelectorChange(Sender: TObject);
begin
  if CalculateIfValid3DigitPositiveReal(LengthOfStringSelector.Text) = false then
    begin
      LengthOfStringSelector.Text:=FloattoStr(DefaultStringLength);
      ShowMessage('Not a valid string length, please select a positive 3 digit or less real number');
    end;
  CheckChosenValuesMakeSense(LengthOfStringSelector,DefaultStringLength);
  StringLength:=StrToFloat(LengthOfStringSelector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.MassOfBall1SelectorChange(Sender: TObject);
begin
  if CalculateIfValid3DigitPositiveReal(MassOfBall1Selector.Text) = false then
    begin
      MassOfBall1Selector.Text:=FloattoStr(DefaultBall1Mass);
      ShowMessage('Not a valid mass of ball 1, please select a positive 3 digit or less real number');
    end;
  CheckChosenValuesMakeSense(MassOfBall1Selector,DefaultBall1Mass);
  Ball1Mass:=StrToFloat(MassOfBall1Selector.Text);
  UpdateModel;
end;

procedure TOwnModelForm.MassOfBall2SelectorChange(Sender: TObject);
begin
  if CalculateIfValid3DigitPositiveReal(MassOfBall2Selector.Text) = false then
    begin
      MassOfBall2Selector.Text:=FloattoStr(DefaultBall2Mass);
      ShowMessage('Not a valid mass of ball 2, please select a positive 3 digit or less real number');
    end;
  CheckChosenValuesMakeSense(MassOfBall2Selector,DefaultBall2Mass);
  Ball2Mass:=StrToFloat(MassOfBall2Selector.Text);
  UpdateModel;
end;


end.


